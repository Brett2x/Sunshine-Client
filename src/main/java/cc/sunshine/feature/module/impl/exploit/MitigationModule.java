package cc.sunshine.feature.module.impl.exploit;

import cc.sunshine.eventbus.impl.packet.impl.PacketSendEvent;
import cc.sunshine.eventbus.interfaces.Listener;
import cc.sunshine.eventbus.interfaces.SubscribeEvent;
import cc.sunshine.feature.module.AbstractModule;
import cc.sunshine.feature.module.enums.ModuleCategory;
import cc.sunshine.feature.module.interfaces.ModuleData;
import cc.sunshine.utils.packet.PacketUtil;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.query.QueryPingC2SPacket;
import net.minecraft.network.packet.c2s.query.QueryRequestC2SPacket;
import org.lwjgl.glfw.GLFW;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

@ModuleData(name = "PolarFucker", description = "Fucks Polar", key = GLFW.GLFW_KEY_H, category = ModuleCategory.EXPLOIT)
public class MitigationModule extends AbstractModule {

    Queue<Packet<?>> requestQueue = new ConcurrentLinkedQueue<>();
    Queue<Packet<?>> pingQueue = new ConcurrentLinkedQueue<>();


    @SubscribeEvent
    private final Listener<PacketSendEvent> eventListener = event -> {
        if(event.getPacket() instanceof QueryPingC2SPacket) {
            event.setCancelled(true);
            pingQueue.add(event.getPacket());
        }

        if(event.getPacket() instanceof QueryRequestC2SPacket) {
            event.setCancelled(true);
            requestQueue.add(event.getPacket());
        }

        if(event.getPacket() instanceof PlayerMoveC2SPacket) {
            if(pingQueue.size() > 20 && pingQueue.size() % 7 == 0) {
                PacketUtil.sendPacketNoEvent(pingQueue.poll());
            }
            if(requestQueue.size() > 20 && requestQueue.size() % 7 == 0) {
                PacketUtil.sendPacketNoEvent(requestQueue.poll());
            }
        }
    };

}
