package cc.sunshine.feature.module.impl.exploit;

import cc.sunshine.eventbus.impl.packet.impl.PacketSendEvent;
import cc.sunshine.eventbus.impl.packet.impl.PostPacketSendEvent;
import cc.sunshine.eventbus.interfaces.Listener;
import cc.sunshine.eventbus.interfaces.SubscribeEvent;
import cc.sunshine.feature.module.AbstractModule;
import cc.sunshine.feature.module.enums.ModuleCategory;
import cc.sunshine.feature.module.interfaces.ModuleData;
import cc.sunshine.feature.property.impl.BooleanProperty;
import cc.sunshine.feature.property.impl.IntProperty;
import cc.sunshine.utils.packet.PacketUtil;
import com.google.common.base.Stopwatch;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

import java.util.concurrent.TimeUnit;

@ModuleData(name = "Regen", category = ModuleCategory.EXPLOIT)
public final class RegenModule extends AbstractModule {
    private final IntProperty delay = new IntProperty("Delay", 500, 0, 10000);
    private final IntProperty packets = new IntProperty("Packets", 5, 1, 20);
    private final BooleanProperty ground = new BooleanProperty("Only On Ground", true);
    private final BooleanProperty balance = new BooleanProperty("Balance Regen", false);

    //private final Stopwatch stopwatch = new Stopwatch();
    private final Stopwatch stopwatch = Stopwatch.createStarted();

    @SubscribeEvent
    private final Listener<PacketSendEvent> packetSendEventListeners = event -> {
        /*if(!balance.getValue() || mc.player.getHealth() == mc.player.getMaxHealth()) return;

        if(event.getPacket() instanceof PlayerMoveC2SPacket && !MoveUtil.isMoving()) {
            event.setCancelled(true);
        }*/
    };

    @SubscribeEvent
    private final Listener<PostPacketSendEvent> packetSendEventListener = event -> {
        if(mc.world == null) return;
        if(mc.player == null) return;

        if(!(event.getPacket() instanceof PlayerMoveC2SPacket)) {
            return;
        }

        PlayerMoveC2SPacket packet = event.getPacket();

        //if(!packet.changesPosition() || mc.player.getHealth() > 20 || !mc.player.isOnGround() || mc.player.getHungerManager().getSaturationLevel() == 0) {
        //    return;
        //}

        if(!packet.changesPosition() || mc.player.getHealth()>=mc.player.getMaxHealth())
            return;

        if(ground.getValue() && !mc.player.isOnGround()) return;

        for (Integer i = 0; i < packets.getValue(); i++) {
            PacketUtil.sendPacketNoEvent(new PlayerMoveC2SPacket.Full(packet.getX(0), packet.getY(0), packet.getZ(0), packet.getYaw(mc.player.getYaw()), packet.getPitch(mc.player.getPitch()), mc.player.isOnGround()));
        }

        //stopwatch.reset();
    };
}